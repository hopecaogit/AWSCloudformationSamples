{
  "Parameters" : {
      "VPCID" : {
          "Type" : "AWS::EC2::VPC::Id",
          "Description" : "VpcId of your existing Virtual Private Cloud (VPC)",
          "ConstraintDescription" : "must be the VPC Id of an existing Virtual Private Cloud."
      },
      "DesiredServerCapacity": {
          "Default": "1",
          "Description" : "The initial number of WebServer instances",
          "Type": "Number",
          "MinValue": "1",
          "MaxValue": "3",
          "ConstraintDescription" : "must be between 1 and 3 EC2 instances."
      },
      "EnvType" : {
        "Description" : "Environment type.",
        "Default" : "test",
        "Type" : "String",
        "AllowedValues" : ["prod", "test", "staging"],
        "ConstraintDescription" : "must specify prod, test or staging."
      },
      "Subnets" : {
        "Type" : "List<AWS::EC2::Subnet::Id>",
        "Description" : "The list of SubnetIds in your Virtual Private Cloud (VPC)",
        "ConstraintDescription" : "must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud."
      },
      "KeyPairName": {
        "Type": "AWS::EC2::KeyPair::KeyName",
        "Description" : "EC2 Key pair"
      },
      "ALBSecurityGroup" : {
        "Type" : "List<AWS::EC2::SecurityGroup::Id>",
        "Description" : "The list of security group. This one is for LoadBalancer"
      },
      "EC2SecurityGroup" : {
        "Type" : "List<AWS::EC2::SecurityGroup::Id>",
        "Description" : "The list of security group. This one is for EC2"
      }
  },

    "Mappings": {
        "EC2Type": {
            "ap-southeast-2" : {
               "prod"    :  "t2.micro" ,
               "test"    :  "t2.micro" ,
               "staging" :  "t2.micro"
              }
        },
        "EC2AMI": {
            "ap-southeast-2" : {
               "prod"    :  "ami-e94e5e8a" ,
               "test"    :  "ami-e94e5e8a" ,
               "staging" :  "ami-e94e5e8a"
              }
        }

    },
    "Resources" : {
      "SampleALB" : {
        "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
        "Properties" : {
          "Subnets" : { "Ref" : "Subnets"},
          "SecurityGroups" : {"Ref": "ALBSecurityGroup"}
        }
      },

      "SampleALBListener" : {
        "Type" : "AWS::ElasticLoadBalancingV2::Listener",
        "Properties" : {
          "DefaultActions" : [{
            "Type" : "forward",
            "TargetGroupArn" : { "Ref" : "SampleALBTargetGroup" }
          }],
          "LoadBalancerArn" : { "Ref" : "SampleALB" },
          "Port" : "80",
          "Protocol" : "HTTP"
        }
      },

      "SampleALBTargetGroup" : {
        "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
        "Properties" : {
          "HealthCheckPath" : "/helloworld.php",
          "HealthCheckIntervalSeconds" : 10,
          "HealthCheckTimeoutSeconds" : 5,
          "HealthyThresholdCount" : 2,
          "Port" : 80,
          "Protocol" : "HTTP",
          "UnhealthyThresholdCount" : 5,
          "VpcId" : {"Ref" : "VPCID"},
          "TargetGroupAttributes" :
            [ { "Key" : "stickiness.enabled", "Value" : "true" },
              { "Key" : "stickiness.type", "Value" : "lb_cookie" },
              { "Key" : "stickiness.lb_cookie.duration_seconds", "Value" : "30" }
          ]
        }
      },

      "SampleWebServerGroup" : {
        "Type" : "AWS::AutoScaling::AutoScalingGroup",
        "Properties" : {
          "VPCZoneIdentifier" : { "Ref" : "Subnets"},
          "LaunchConfigurationName" : { "Ref" : "SampleLaunchConfig" },
          "MinSize" : "1",
          "MaxSize" : "3",
          "DesiredCapacity" : { "Ref" : "DesiredServerCapacity" },
          "TargetGroupARNs" : [ { "Ref" : "SampleALBTargetGroup" } ]
        },
        "CreationPolicy" : {
          "ResourceSignal" : {
            "Timeout" : "PT15M"
          }
        },
        "UpdatePolicy": {
          "AutoScalingRollingUpdate": {
            "MinInstancesInService": "1",
            "MaxBatchSize": "1",
            "PauseTime" : "PT15M",
            "WaitOnResourceSignals": "true"
          }
        }
      },

      "SampleLaunchConfig": {
        "Type" : "AWS::AutoScaling::LaunchConfiguration",
        "Metadata" : {
          "AWS::CloudFormation::Init" : {
            "configSets" : {
              "mytest_install" : ["install_cfn", "install_myWeb"]
            },
            "install_cfn" : {
              "files": {
                "/etc/cfn/cfn-hup.conf": {
                  "content": { "Fn::Join": [ "", [
                    "[main]\n",
                    "stack=", { "Ref": "AWS::StackId" }, "\n",
                    "region=", { "Ref": "AWS::Region" }, "\n"
                  ]]},
                  "mode"  : "000400",
                  "owner" : "root",
                  "group" : "root"
                },
                "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                  "content": { "Fn::Join": [ "", [
                    "[cfn-auto-reloader-hook]\n",
                    "triggers=post.update\n",
                    "path=Resources.SampleLaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                    "action=/opt/aws/bin/cfn-init -v ",
                            "         --stack ", { "Ref" : "AWS::StackName" },
                            "         --resource SampleLaunchConfig ",
                            "         --configsets mytest_install ",
                            "         --region ", { "Ref" : "AWS::Region" }, "\n"
                  ]]},
                  "mode"  : "000400",
                  "owner" : "root",
                  "group" : "root"
                }
              },
              "services" : {
                "sysvinit" : {
                  "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                                "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
                }
              }
            },

            "install_myWeb" : {
              "packages" : {
                "apt" : {
                  "php"       : [],
                  "httpd"     : []
                }
              },
              "files" : {
                "/var/www/html/helloworld.php" : {
                  "content" : { "Fn::Join" : [ "", [
                    "<html>\n",
                    " <head>\n",
                    "  <title>PHP Test</title>\n",
                    " </head>\n",
                    " <body>\n",
                    " <?php echo '<p>Hello World</p>'; ?>\n",
                    " </body>\n",
                    "</html>\n"
                  ]]},
                  "mode"  : "000644",
                  "owner" : "root",
                  "group" : "root"
                }
              },
              "services" : {
                "sysvinit" : {
                  "httpd" : { "enabled" : "true", "ensureRunning" : "true" }
                }
              }
            }
          }
        },
        "Properties": {
          "ImageId" : { "Fn::FindInMap" : [ "EC2AMI", { "Ref" : "AWS::Region" }, {"Ref" : "EnvType" }]},
          "InstanceType"   : { "Fn::FindInMap" : [ "EC2Type", { "Ref" : "AWS::Region" }, { "Ref" : "EnvType" }] },
          "SecurityGroups" : {"Ref": "EC2SecurityGroup"},
          "KeyName"        : {"Ref": "KeyPairName"},
          "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                         "#!/bin/bash -xe\n",
                         "apt update -y aws-cfn-bootstrap\n",

                         "/opt/aws/bin/cfn-init -v ",
                         "         --stack ", { "Ref" : "AWS::StackName" },
                         "         --resource SampleLaunchConfig ",
                         "         --configsets mytest_install ",
                         "         --region ", { "Ref" : "AWS::Region" }, "\n",

                         "/opt/aws/bin/cfn-signal -e $? ",
                         "         --stack ", { "Ref" : "AWS::StackName" },
                         "         --resource SampleWebServerGroup ",
                         "         --region ", { "Ref" : "AWS::Region" }, "\n"
          ]]}}
        }
      }
    }
  }
